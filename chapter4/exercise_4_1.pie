#lang pie

(claim elim-Pair
    (Pi ((A U)
         (D U)
         (X U))
         (-> (Pair A D)
             (-> A D
                X)
            X)))
(define elim-Pair
    (lambda (A D X)
        (lambda (p f)
            (f (car p) (cdr p)))))

;; Exercise 4.1
;;
;; Extend the definitions of kar and kdr (frame 4.42) so they work with arbirary
;; Pairs (instead of just for Pair Nat Nat).

(claim kar 
    (Pi ((A U)
        (B U))
        (-> (Pair A B)
             A)))
(define kar
    (lambda (A B)
        (lambda (p)
            (elim-Pair
                A B
                A
                p
                (lambda (x y)
                   x)))))

(claim kdr 
    (Pi ((A U)
        (B U))
        (-> (Pair A B)
             B)))
(define kdr
    (lambda (A B)
        (lambda (p)
            (elim-Pair
                A B
                B
                p
                (lambda (x y)
                   y)))))

(check-same Nat (kar Nat Atom (cons 1 'hi)) 1)
(check-same Atom (kdr Nat Atom (cons 1 'hi)) 'hi)

