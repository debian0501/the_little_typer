#lang pie

;; Exercise 4.2
;;
;; Define a function called compose that takes (in addition to the type
;; arguments A, B, C) an argument of type (-> A B) and an argument of
;; type (-> B C) that and evaluates to a value of type (-> A C), the function
;; composition of the arguments.

(claim compose
    (Pi ((A U)
        (B U)
        (C U))
        (-> (-> A B )
            (-> B C )
            (-> A C))))
(define compose
    (lambda (A B C)
        (lambda (f g)
            (lambda (a) 
                (g (f a))))))

(claim step
    (-> Nat 
        Atom))
(define step
    (lambda (n)
        (which-Nat n 'nil
            (lambda (n)
                't))
        ))

(claim at-least-two?
    (-> Nat 
        Atom))
(define at-least-two?
    (lambda (n)
        (which-Nat n 'nil
            (lambda (n)
                (step n))
            )))

(claim iszero?
  (-> Nat 
  Nat))
(define iszero?
  (lambda (n)
    (rec-Nat n
      0
      (lambda (n-1 notzero)
        1))))

(claim twin
    (-> Atom 
        (Pair Atom Atom)))
(define twin
    (lambda (n)
        (cons n n)))

(claim compTest
  (-> Nat 
    (Pair Atom Atom)))
(define compTest
  (compose Nat Atom (Pair Atom Atom) at-least-two? twin))

(check-same (Pair Atom Atom) (compTest 100) (cons 't 't))
(check-same (Pair Atom Atom) (compTest 2) (cons 't 't))
(check-same (Pair Atom Atom) (compTest 0) (cons 'nil 'nil))



