#lang pie

(claim a
    (Pair Nat Atom))
(define a
    (cons  1 'hi))

(claim len-step
    (Pi ((E U))
        (-> E (List E) Nat
            Nat)))
(define len-step
    (lambda (E)
        (lambda (e es len-es)
            (add1 len-es))))

(claim len
    (Pi ((E U))
        (-> (List E)
            Nat)))
(define len
    (lambda (E)
        (lambda (es)
            (rec-List es
                0
                (len-step E)))))



(claim la
    (List Atom))
(define la
    (::'adam
        (::'berta
            (::'cesar nil))))

(claim lb
    (List Atom))
(define lb
    (::'dora
        (::'emil
            (::'friedrich nil))))

(claim append-step
    (Pi((E U))
        (-> E (List E) (List E)
            (List E))))
(define append-step
    (lambda (E)
        (lambda (e es res)
            (:: e res))))

(claim append
    (Pi((E U))
        (-> (List E) (List E)
            (List E))))
(define append
    (lambda (E)
        (lambda (la lb)
            (rec-List la
                lb
                (append-step E)))))
            
(claim a-Atom 
    (-> (List Atom) (List Atom) 
        (List Atom)))
(define a-Atom (append Atom))

(claim snoc
    (Pi ((E U))
        (-> (List E) E
            (List E))))
(define snoc
    (lambda (E)
        (lambda (es e)
            (rec-List es
                (:: e nil)
                (append-step E)))))

(claim s-Atom 
    (-> (List Atom) Atom
        (List Atom)))
(define s-Atom (snoc Atom))