#lang pie

(claim + 
    (-> Nat Nat 
        Nat))
(define + 
    (lambda (n j) 
        (rec-Nat n j 
            (lambda (smaller acc) 
                (add1 acc)))))

(claim sum-Step
    (-> Nat (List Nat) Nat
        Nat))
(define sum-Step
    (lambda (e es acc)
        (+ e acc)))


;; Exercise 5.1
;;
;; Define a function called sum-List that takes one List Nat argument and
;; evaluates to a Nat, the sum of the Nats in the list.
(claim sum-List
    (-> (List Nat) 
        Nat))
(define sum-List
    (lambda (l)
        (rec-List l
            0
            sum-Step)))

(check-same Nat (sum-List (:: 1 ( :: 2 nil))) 3 )
(check-same Nat (sum-List (:: 1 ( :: 2 (:: 3 nil)))) 6 )
(check-same Nat (sum-List nil) 0)